import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, \
    ConversationHandler
from config import BOT_TOKEN, MAIN_KEYBOARD
from database import init_db, add_user, update_user, add_tracked_product, user_exists
from ozon_parser import OzonParser
import atexit

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ARTICLE, PERCENT = range(2)

# ‚úÖ –°–û–ó–î–ê–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ü–ê–†–°–ï–†–ê
parser = OzonParser(headless=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —é–∑–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π—Å—è
    is_new_user = not user_exists(user.id)

    if is_new_user:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        add_user(user.id, user.username, user.first_name, user.last_name)
        greeting = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ Ozon!\n\n"
            "üì¶ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã.\n"
            "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)"
        )
    else:
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è
        update_user(user.id, user.username, user.first_name, user.last_name)
        greeting = (
            f"üì¶ –°–Ω–æ–≤–∞ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä, {user.first_name}?\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)"
        )

    await update.message.reply_text(
        greeting,
        reply_markup=MAIN_KEYBOARD
    )
    return ARTICLE


async def get_article(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_input = update.message.text.strip()

    if not user_input.isdigit():
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–∞")
        return ARTICLE

    context.user_data['article'] = user_input
    logger.info(f"User {update.effective_user.id} entered article: {user_input}")

    keyboard = [['5%', '10%', '15%', '20%+']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    await update.message.reply_text(
        f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª {user_input} –ø—Ä–∏–Ω—è—Ç!\n\n"
        "üìâ –ù–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–µ—à–µ–≤–µ—Ç—å —Ç–æ–≤–∞—Ä?",
        reply_markup=reply_markup
    )
    return PERCENT


async def process_product_tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    loading_message = await update.message.reply_text(
        "‚è≥ –ò—â—É —Ç–æ–≤–∞—Ä –∏ –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
    )
    reply_markup = ReplyKeyboardRemove()

    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∫–∏–¥–∫–∏ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Ü–µ–Ω—ã"""
    percent_choice = update.message.text
    article = context.user_data.get('article', 'unknown')
    user_id = update.effective_user.id

    if percent_choice == '20%+':
        percent = 20
    else:
        percent = int(percent_choice.replace('%', ''))

    # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ê–†–°–ï–† –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –¶–ï–ù–´
    product_info = parser.get_product_price(article)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
    if product_info['status'] != 'success':
        error_messages = {
            'error': f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {article}",
            'not_found': f"‚ùå –¢–æ–≤–∞—Ä {article} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }

        message = error_messages.get(product_info['status'],
                                     f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã")

        await update.message.reply_text(
            f"{message}\nüîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É: {product_info['url']}",
            reply_markup=None
        )
        return ConversationHandler.END

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏ —á–∏—Å—Ç–∏–º –µ–µ
    price_text = product_info['price']
    clean_price = price_text.replace('‚ÇΩ', '').replace(' ', '').strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
    add_tracked_product(
        user_id=user_id,
        article=article,
        target_percent=percent,
        current_price=clean_price,
        original_price=clean_price
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å REPLAY –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=loading_message.message_id,
        text=(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!\n\n"
            f"üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ç–æ–≤–∞—Ä {article}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product_info['price']}\n"
            f"üìâ –ñ–¥—É —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞: {percent}%\n"
            f"üîî –£–≤–µ–¥–æ–º–ª—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏!\n\n"
            f"üîó –°—Å—ã–ª–∫–∞: {product_info['url']}"
        )
    )

    await update.message.reply_text(
        f"üöÄ –°–æ–æ–±—â–∏–º –í–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä –ø–æ–¥–µ—à–µ–≤–µ–µ—Ç –Ω–∞ {percent}%",
        reply_markup=MAIN_KEYBOARD
    )

    return ConversationHandler.END


async def add_another_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä'"""
    user = update.effective_user

    await update.message.reply_text(
        f"üì¶ –û—Ç–ª–∏—á–Ω–æ, {user.first_name}! –ü—Ä–∏—à–ª–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞
    )
    return ARTICLE


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
    await update.message.reply_text(
        '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
        reply_markup=MAIN_KEYBOARD  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    return ConversationHandler.END


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()

    application = Application.builder().token(BOT_TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.Text(['üì¶ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä']), add_another_product)
        ],
        states={
            ARTICLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_article)],
            PERCENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_product_tracking)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π...")
    application.run_polling()


if __name__ == '__main__':
    main()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
@atexit.register
def cleanup():
    print("üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    parser.close()
