import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

from config import BOT_TOKEN
from database import init_db, add_user, add_tracked_product
from ozon_api import get_product_price

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ARTICLE, PERCENT = range(2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    add_user(user.id, user.username, user.first_name, user.last_name)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ Ozon!\n\n"
        "üì¶ –ü—Ä–∏—à–ª–∏ –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)"
    )
    return ARTICLE


async def get_article(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_input = update.message.text.strip()

    if not user_input.isdigit():
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–∞")
        return ARTICLE

    context.user_data['article'] = user_input
    logger.info(f"User {update.effective_user.id} entered article: {user_input}")

    keyboard = [['5%', '10%', '15%', '20%+']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    await update.message.reply_text(
        f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª {user_input} –ø—Ä–∏–Ω—è—Ç!\n\n"
        "üìâ –ù–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–µ—à–µ–≤–µ—Ç—å —Ç–æ–≤–∞—Ä?",
        reply_markup=reply_markup
    )
    return PERCENT


async def get_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∫–∏–¥–∫–∏"""
    percent_choice = update.message.text
    article = context.user_data.get('article', 'unknown')
    user_id = update.effective_user.id
    product_info = get_product_price(article)

    if product_info['status'] != 'success':
        error_messages = {
            'blocked': "‚ùå Ozon –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ—Å—Ç—É–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            'not_found': f"‚ùå –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} –Ω–µ –Ω–∞–π–¥–µ–Ω",
            'error': "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã",
            'mock': "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ü–µ–Ω—É (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
        }

        status = product_info['status']
        message = error_messages.get(status, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

        if status == 'mock':
            # –î–ª—è mock —Ä–µ–∂–∏–º–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "—Ü–µ–Ω—É"
            message += f"\nüí∞ –î–µ–º–æ-—Ü–µ–Ω–∞: {product_info['price']} —Ä—É–±"

        await update.message.reply_text(
            f"{message}\nüîó –°—Å—ã–ª–∫–∞: {product_info['url']}",
            reply_markup=None
        )

        # –î–ª—è mock —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        if status != 'mock':
            return ConversationHandler.END

    if percent_choice == '20%+':
        percent = 20
    else:
        percent = int(percent_choice.replace('%', ''))

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (–∑–∞–≥–ª—É—à–∫–∞)
    product_info = get_product_price(article)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
    add_tracked_product(user_id, article, percent)

    await update.message.reply_text(
        f"üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ç–æ–≤–∞—Ä {article}\n"
        f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product_info['price']} —Ä—É–±\n"
        f"üìâ –ñ–¥—É —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞: {percent}%\n"
        f"üîî –£–≤–µ–¥–æ–º–ª—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏!\n\n"
        f"üîó –°—Å—ã–ª–∫–∞: {product_info['url']}",
        reply_markup=None
    )

    return ConversationHandler.END


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()

    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ARTICLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_article)],
            PERCENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_percent)],
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: u.message.reply_text('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'))],
    )

    application.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()
