import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time


class OzonParser:
    def __init__(self, headless=True):
        self.headless = headless
        self.driver = None
        self.setup_driver()

    def setup_driver(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ –±–µ–∑ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –æ–ø—Ü–∏–π"""
        try:
            options = uc.ChromeOptions()
            if self.headless:
                options.add_argument("--headless")

            # ‚úÖ –¢–û–õ–¨–ö–û –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç undetected-chromedriver
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-blink-features=AutomationControlled")

            # ‚úÖ –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ stealth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument("--disable-notifications")
            options.add_argument("--disable-popup-blocking")

            # User-Agent
            options.add_argument(
                "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

            # ‚úÖ –ü–†–û–°–¢–û–ô –∑–∞–ø—É—Å–∫
            self.driver = uc.Chrome(options=options)

            # ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            self.driver.set_window_size(1920, 1080)

            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ WebDriver
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

            print("‚úÖ –î—Ä–∞–π–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    def accept_all_permissions(self):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        try:
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            time.sleep(3)

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫—É–∫–∏
            cookie_selectors = [
                "[data-widget='acceptCookie']",
                "button[aria-label*='cookie']",
                "button[aria-label*='Cookie']",
                ".cookie-button",
                ".accept-cookies",
                "button:contains('–ü—Ä–∏–Ω—è—Ç—å')",
                "button:contains('–ø—Ä–∏–Ω—è—Ç—å')"
            ]

            for selector in cookie_selectors:
                try:
                    cookie_button = WebDriverWait(self.driver, 3).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    if cookie_button.is_displayed():
                        cookie_button.click()
                        print("‚úÖ –ö—É–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã")
                        time.sleep(1)
                        break
                except:
                    continue

        except Exception as e:
            print(f"‚ÑπÔ∏è –ù–µ –Ω–∞—à–ª–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω: {e}")

    def get_product_price(self, article):
        """–ü–∞—Ä—Å–∏—Ç —Ü–µ–Ω—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∞—Å—Å—É"""
        try:
            url = f"https://www.ozon.ru/product/{article}/"
            print(f"üåê –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä: {article}")

            self.driver.get(url)

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            self.accept_all_permissions()

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )

            # ‚úÖ –ò—â–µ–º –¶–ï–ù–£ –ø–æ –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ –ö–õ–ê–°–°–£
            price_element = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, ".pdp_bf2.tsHeadline500Medium"))
            )

            price = price_element.text.strip()
            print(f"‚úÖ –¶–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: {price}")

            return {
                'price': price,
                'url': url,
                'article': article,
                'status': 'success'
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            self.driver.save_screenshot(f"error_{article}.png")
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: error_{article}.png")

            return {
                'price': None,
                'url': url,
                'article': article,
                'status': 'error',
                'error': str(e)
            }

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            self.driver.quit()
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
